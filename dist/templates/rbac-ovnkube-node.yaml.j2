apiVersion: v1
kind: ServiceAccount
metadata:
    name: ovnkube-node
    namespace: ovn-kubernetes

# When ovn_enable_ovnkube_identity is true, an ovnkube-node process will identify as a user in a system:ovn-nodes group,
# not the ovnkube-node serviceAccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: ovnkube-node
roleRef:
    name: ovnkube-node
    kind: ClusterRole
    apiGroup: rbac.authorization.k8s.io
subjects:
    {% if ovn_enable_ovnkube_identity == "true" -%}
    - kind: Group
      name: system:ovn-nodes
      apiGroup: rbac.authorization.k8s.io
    {% else %}
    - kind: ServiceAccount
      name: ovnkube-node
      namespace: ovn-kubernetes
    {%- endif %}


# even when ovn_enable_ovnkube_identity is enabled, an ovnkube-node service account
# is used in the ovnkube-node pod during initialization:
# https://github.com/ovn-org/ovn-kubernetes/blob/db65b5e2aad63cd2a122215383be06181b8c9089/dist/images/ovnkube.sh#L752
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: ovnkube-node-status-reader
roleRef:
    name: ovnkube-node-status-reader
    kind: ClusterRole
    apiGroup: rbac.authorization.k8s.io
subjects:
    - kind: ServiceAccount
      name: ovnkube-node
      namespace: ovn-kubernetes

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: ovnkube-node-configmaps
    namespace: ovn-kubernetes
roleRef:
    name: ovn-k8s-configmap
    kind: Role
    apiGroup: rbac.authorization.k8s.io
subjects:
    {% if ovn_enable_ovnkube_identity == "true" -%}
    - kind: Group
      name: system:ovn-nodes
      apiGroup: rbac.authorization.k8s.io
    {% else %}
    - kind: ServiceAccount
      name: ovnkube-node
      namespace: ovn-kubernetes
    {%- endif %}

{% if ovn_enable_interconnect == "true" -%}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: ovnkube-node-ic-configmaps-update
    namespace: ovn-kubernetes
roleRef:
    name: ovn-k8s-configmap-update
    kind: Role
    apiGroup: rbac.authorization.k8s.io
subjects:
    {% if ovn_enable_ovnkube_identity == "true" -%}
    - kind: Group
      name: system:ovn-nodes
      apiGroup: rbac.authorization.k8s.io
    {% else %}
    - kind: ServiceAccount
      name: ovnkube-node
      namespace: ovn-kubernetes
    {%- endif %}
{%- endif %}

# even when ovn_enable_ovnkube_identity is enabled, an ovnkube-node service account 
# is used in the ovnkube-node pod during initialization:
# https://github.com/ovn-org/ovn-kubernetes/blob/db65b5e2aad63cd2a122215383be06181b8c9089/dist/images/ovnkube.sh#L370
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: ovnkube-node-ep
    namespace: ovn-kubernetes
roleRef:
    name: ovnkube-node-ep
    kind: Role
    apiGroup: rbac.authorization.k8s.io
subjects:
    - kind: ServiceAccount
      name: ovnkube-node
      namespace: ovn-kubernetes


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: ovnkube-node-status-reader
rules:
    - apiGroups: [""]
      resources:
          - nodes/status
      verbs: [ "get" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: ovnkube-node
rules:
    - apiGroups: [""]
      resources:
          - namespaces
          - nodes
          - pods
          - services
          - endpoints
      verbs: [ "get", "list", "watch" ]
    - apiGroups: ["discovery.k8s.io"]
      resources:
          - endpointslices
      verbs: [ "get", "list", "watch" ]
    {% if ovn_enable_interconnect == "true" -%}
    - apiGroups: ["networking.k8s.io"]
      resources:
          - networkpolicies
      verbs: [ "get", "list", "watch" ]
    - apiGroups: ["k8s.cni.cncf.io"]
      resources:
          - network-attachment-definitions
          - multi-networkpolicies
      verbs: ["list", "get", "watch"]
    - apiGroups: ["k8s.ovn.org"]
      resources:
          - egressfirewalls
          - adminpolicybasedexternalroutes/status
      verbs: [ "patch", "update" ]
    - apiGroups: ["policy.networking.k8s.io"]
      resources:
          - adminnetworkpolicies/status
          - baselineadminnetworkpolicies/status
      verbs: [ "patch", "update" ]
    {%- endif %}
    - apiGroups: ["policy.networking.k8s.io"]
      resources:
          - adminnetworkpolicies
          - baselineadminnetworkpolicies
      verbs: ["list", "get", "watch"]
    - apiGroups: ["k8s.ovn.org"]
      resources:
          - egressfirewalls
          - egressips
          - egressqoses
          - egressservices
          - adminpolicybasedexternalroutes
      verbs: [ "get", "list", "watch" ]
    - apiGroups: ["certificates.k8s.io"]
      resources:
          - certificatesigningrequests
      verbs:
        - create
        - get
        - list
        - watch
    - apiGroups: [""]
      resources:
          - events
      verbs: ["create", "patch", "update"]
    - apiGroups: [""]
      resources:
          {% if ovn_enable_interconnect == "true" -%}
          - pods/status # In IC ovnkube-controller updates pod annotations for local pods
          - namespaces/status # #TODO: I think this is a bug, all of the nodes update the exgw annotation on services
          {%- endif %}
          - nodes/status
      verbs: [ "patch", "update" ]

# Without IC endpoints are read by ovnkube-node on startup
# Endpoints are created by ovnkube-zone-controller/sb-ovsdb startup script in multinode-zone for IC
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
    name: ovnkube-node-ep
    namespace: ovn-kubernetes
rules:
    - apiGroups: [""]
      resources:
          - endpoints
      verbs:
        - get
        {% if ovn_enable_interconnect == "true" -%}
        - create
        {%- endif %}